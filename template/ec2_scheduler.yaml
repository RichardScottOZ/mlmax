AWSTemplateFormatVersion: 2010-09-09
Description: "(SO0030) - aws-instance-scheduler, version v1.3.0"
Parameters:
  SchedulingActive:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
    Description: Activate or deactivate scheduling.
  ScheduledServices:
    Type: String
    AllowedValues:
      - EC2
      - RDS
      - Both
    Default: EC2
    Description: Scheduled Services.
  ScheduleRdsClusters:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
    Description: Enable scheduling of Aurora clusters for RDS Service.
  CreateRdsSnapshot:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
    Description: >-
      Create snapshot before stopping RDS instances(does not apply to Aurora
      Clusters).
  MemorySize:
    Type: Number
    AllowedValues:
      - 128
      - 384
      - 512
    Default: 128
    Description: >-
      Size of the Lambda function running the scheduler, increase size when
      processing large numbers of instances
  UseCloudWatchMetrics:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
    Description: Collect instance scheduling data using CloudWatch metrics.
  LogRetentionDays:
    Type: Number
    Default: 30
    AllowedValues:
      - 1
      - 3
      - 5
      - 7
      - 14
      - 30
    Description: Retention days for scheduler logs.
  Trace:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
    Description: Enable logging of detailed informtion in CloudWatch logs.
  TagName:
    Type: String
    Default: Schedule
    MinLength: 1
    MaxLength: 127
    Description: >-
      Name of tag to use for associating instance schedule schemas with service
      instances.
  DefaultTimezone:
    Type: String
    Default: Asia/Singapore
    AllowedValues:
      - Asia/Singapore
      - Asia/Taipei
      - UTC

    Description: Choose the default Time Zone. Default is 'UTC'
  Regions:
    Type: CommaDelimitedList
    Description: >-
      List of regions in which instances are scheduled, leave blank for current
      region only.
    Default: ""
  CrossAccountRoles:
    Type: CommaDelimitedList
    Description: >-
      Comma separated list of ARN's for cross account access roles. These roles
      must be created in all checked accounts the scheduler to start and stop
      instances.
    Default: ""
  StartedTags:
    Type: String
    Description: >-
      Comma separated list of tagname and values on the formt
      name=value,name=value,.. that are set on started instances
    Default: ""
  StoppedTags:
    Type: String
    Description: >-
      Comma separated list of tagname and values on the formt
      name=value,name=value,.. that are set on stopped instances
    Default: ""
  SchedulerFrequency:
    Type: String
    AllowedValues:
      - "1"
      - "2"
      - "5"
      - "10"
      - "15"
      - "30"
      - "60"
    Default: "5"
    Description: Scheduler running frequency in minutes.
  ScheduleLambdaAccount:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "Yes"
    Description: Schedule instances in this account.
  SendAnonymousData:
    Type: String
    AllowedValues:
      - "Yes"
      - "No"
    Default: "No"
    Description: Send Anonymous Metrics Data.
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: Scheduler (version v1.3.0)
        Parameters:
          - TagName
          - ScheduledServices
          - ScheduleRdsClusters
          - CreateRdsSnapshot
          - SchedulingActive
          - Regions
          - DefaultTimezone
          - CrossAccountRoles
          - ScheduleLambdaAccount
          - SchedulerFrequency
          - MemorySize
      - Label:
          default: Options
        Parameters:
          - UseCloudWatchMetrics
          - SendAnonymousData
          - Trace
      - Label:
          default: Other parameters
        Parameters:
          - LogRetentionDays
          - StartedTags
          - StoppedTags
    ParameterLabels:
      LogRetentionDays:
        default: Log retention days
      StartedTags:
        default: Started tags
      StoppedTags:
        default: Stopped tags
      SchedulingActive:
        default: Scheduling enabled
      CrossAccountRoles:
        default: Cross-account roles
      ScheduleLambdaAccount:
        default: This account
      UseCloudWatchMetrics:
        default: Enable CloudWatch Metrics
      Trace:
        default: Enable CloudWatch Logs
      TagName:
        default: Instance Scheduler tag name
      ScheduledServices:
        default: Service(s) to schedule
      ScheduleRdsClusters:
        default: Schedule Aurora Clusters
      CreateRdsSnapshot:
        default: Create RDS instance snapshot
      DefaultTimezone:
        default: Default time zone
      SchedulerFrequency:
        default: Frequency
      Regions:
        default: Region(s)
      MemorySize:
        default: Memory size
      SendAnonymousData:
        default: Send anonymous usage data
Mappings:
  TrueFalse:
    "Yes":
      Value: "True"
    "No":
      Value: "False"
  EnabledDisabled:
    "Yes":
      Value: ENABLED
    "No":
      Value: DISABLED
  Services:
    EC2:
      Value: ec2
    RDS:
      Value: rds
    Both:
      Value: "ec2,rds"
  Timeouts:
    "1":
      Value: cron(0/1 * * * ? *)
    "2":
      Value: cron(0/2 * * * ? *)
    "5":
      Value: cron(0/5 * * * ? *)
    "10":
      Value: cron(0/10 * * * ? *)
    "15":
      Value: cron(0/15 * * * ? *)
    "30":
      Value: cron(0/30 * * * ? *)
    "60":
      Value: cron(0 0/1 * * ? *)
  Settings:
    Metrics:
      Url: "https://metrics.awssolutionsbuilder.com/generic"
      SolutionId: S00030
    RdsTagCaching:
      Enabled: "True"
Resources:
  SchedulerPolicy:
    Type: "AWS::IAM::Policy"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W12
            reason: >-
              All policies have been scoped to be as restrictive as possible.
              This solution needs to access ec2/rds resources across all
              regions.
    Properties:
      PolicyName: SchedulerPolicy
      Roles:
        - !Ref SchedulerRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:PutRetentionPolicy"
            Resource:
              - !Join
                - ":"
                - - "arn:aws:logs"
                  - !Ref "AWS::Region"
                  - !Ref "AWS::AccountId"
                  - log-group
                  - !Ref SchedulerLogGroup
                  - "*"
              - !Join
                - ":"
                - - "arn:aws:logs"
                  - !Ref "AWS::Region"
                  - !Ref "AWS::AccountId"
                  - "log-group:/aws/lambda/*"
          - Effect: Allow
            Action:
              - "rds:DeleteDBSnapshot"
              - "rds:DescribeDBSnapshots"
              - "rds:StopDBInstance"
            Resource: !Join
              - ":"
              - - "arn:aws:rds:*"
                - !Ref "AWS::AccountId"
                - "snapshot:*"
          - Effect: Allow
            Action:
              - "rds:AddTagsToResource"
              - "rds:RemoveTagsFromResource"
              - "rds:DescribeDBSnapshots"
              - "rds:StartDBInstance"
              - "rds:StopDBInstance"
            Resource: !Join
              - ":"
              - - "arn:aws:rds:*"
                - !Ref "AWS::AccountId"
                - "db:*"
          - Effect: Allow
            Action:
              - "rds:AddTagsToResource"
              - "rds:RemoveTagsFromResource"
              - "rds:StartDBCluster"
              - "rds:StopDBCluster"
            Resource:
              - !Join
                - ":"
                - - "arn:aws:rds:*"
                  - !Ref "AWS::AccountId"
                  - "cluster:*"
          - Effect: Allow
            Action:
              - "ec2:StartInstances"
              - "ec2:StopInstances"
              - "ec2:CreateTags"
              - "ec2:DeleteTags"
            Resource:
              - !Join
                - ":"
                - - "arn:aws:ec2:*"
                  - !Ref "AWS::AccountId"
                  - instance/*
          - Effect: Allow
            Action:
              - "dynamodb:DeleteItem"
              - "dynamodb:GetItem"
              - "dynamodb:PutItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWriteItem"
            Resource:
              - !Join
                - ""
                - - !Join
                    - ":"
                    - - "arn:aws:dynamodb"
                      - !Ref "AWS::Region"
                      - !Ref "AWS::AccountId"
                      - table/
                  - !Ref StateTable
              - !Join
                - ""
                - - !Join
                    - ":"
                    - - "arn:aws:dynamodb"
                      - !Ref "AWS::Region"
                      - !Ref "AWS::AccountId"
                      - table/
                  - !Ref ConfigTable
          - Effect: Allow
            Action: "sns:Publish"
            Resource:
              - !Ref InstanceSchedulerSnsTopic
          - Effect: Allow
            Action:
              - "lambda:InvokeFunction"
            Resource:
              - !Join
                - ":"
                - - "arn:aws:lambda"
                  - !Ref "AWS::Region"
                  - !Ref "AWS::AccountId"
                  - function
                  - !Join
                    - "-"
                    - - !Ref "AWS::StackName"
                      - InstanceSchedulerMain
          - Effect: Allow
            Action:
              - "logs:DescribeLogStreams"
              - "rds:DescribeDBClusters"
              - "rds:DescribeDBInstances"
              - "ec2:DescribeInstances"
              - "ec2:DescribeRegions"
              - "ec2:ModifyInstanceAttribute"
              - "cloudwatch:PutMetricData"
              - "ssm:GetParameter"
              - "ssm:GetParameters"
              - "ssm:DescribeMaintenanceWindows"
              - "tag:GetResources"
              - "sts:AssumeRole"
            Resource:
              - "*"
  SchedulerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: "sts:AssumeRole"
      Path: /
  StateTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: service
          AttributeType: S
        - AttributeName: account-region
          AttributeType: S
      KeySchema:
        - AttributeName: service
          KeyType: HASH
        - AttributeName: account-region
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  ConfigTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        - AttributeName: type
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      KeySchema:
        - AttributeName: type
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
  SchedulerLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - logs
      RetentionInDays: !Ref LogRetentionDays
  InstanceSchedulerSnsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Ref "AWS::StackName"
  Main:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Join
        - "-"
        - - !Ref "AWS::StackName"
          - InstanceSchedulerMain
      Code:
        S3Bucket: !Join
          - "-"
          - - solutions
            - !Ref "AWS::Region"
        S3Key: aws-instance-scheduler/v1.3.0/instance-scheduler.zip
      Handler: main.lambda_handler
      Runtime: python3.7
      Role: !GetAtt
        - SchedulerRole
        - Arn
      Environment:
        Variables:
          CONFIG_TABLE: !Ref ConfigTable
          SCHEDULER_FREQUENCY: !Ref SchedulerFrequency
          TAG_NAME: !Ref TagName
          STATE_TABLE: !Ref StateTable
          LOG_GROUP: !Ref SchedulerLogGroup
          ACCOUNT: !Ref "AWS::AccountId"
          ISSUES_TOPIC_ARN: !Ref InstanceSchedulerSnsTopic
          STACK_NAME: !Ref "AWS::StackName"
          BOTO_RETRY: "5,10,30,0.25"
          ENV_BOTO_RETRY_LOGGING: "False"
          SEND_METRICS: !FindInMap
            - TrueFalse
            - !Ref SendAnonymousData
            - Value
          SOLUTION_ID: !FindInMap
            - Settings
            - Metrics
            - SolutionId
          TRACE: !FindInMap
            - TrueFalse
            - !Ref Trace
            - Value
          USER_AGENT: !Join
            - "-"
            - - InstanceScheduler
              - !Ref "AWS::StackName"
              - v1.3.0
          METRICS_URL: !FindInMap
            - Settings
            - Metrics
            - Url
          SCHEDULER_RULE: !Ref SchedulerRule
      MemorySize: !Ref MemorySize
      Timeout: 300
      Description: "EC2 and RDS instance scheduler, version v1.3.0"
    DependsOn:
      - SchedulerPolicy
  SchedulerInvokePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !Join
        - ":"
        - - "arn:aws:lambda"
          - !Ref "AWS::Region"
          - !Ref "AWS::AccountId"
          - function
          - !Join
            - "-"
            - - !Ref "AWS::StackName"
              - InstanceSchedulerMain
      Action: "lambda:InvokeFunction"
      Principal: events.amazonaws.com
      SourceArn: !GetAtt
        - SchedulerRule
        - Arn
    DependsOn: Main
  SchedulerRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description: >-
        Instance Scheduler - Rule to trigger instance for scheduler function
        version v1.3.0
      ScheduleExpression: !FindInMap
        - Timeouts
        - !Ref SchedulerFrequency
        - Value
      State: !FindInMap
        - EnabledDisabled
        - !Ref SchedulingActive
        - Value
      Targets:
        - Id: MainFunction
          Arn: !Join
            - ":"
            - - "arn:aws:lambda"
              - !Ref "AWS::Region"
              - !Ref "AWS::AccountId"
              - function
              - !Join
                - "-"
                - - !Ref "AWS::StackName"
                  - InstanceSchedulerMain
  SchedulerConfigHelper:
    Type: "Custom::ServiceSetup"
    Properties:
      ServiceToken: !GetAtt
        - Main
        - Arn
      timeout: "120"
      config_table: !Ref ConfigTable
      tagname: !Ref TagName
      default_timezone: !Ref DefaultTimezone
      use_metrics: !FindInMap
        - TrueFalse
        - !Ref UseCloudWatchMetrics
        - Value
      scheduled_services: !Split
        - ","
        - !FindInMap
          - Services
          - !Ref ScheduledServices
          - Value
      schedule_clusters: !FindInMap
        - TrueFalse
        - !Ref ScheduleRdsClusters
        - Value
      create_rds_snapshot: !FindInMap
        - TrueFalse
        - !Ref CreateRdsSnapshot
        - Value
      regions: !Ref Regions
      cross_account_roles: !Ref CrossAccountRoles
      schedule_lambda_account: !FindInMap
        - TrueFalse
        - !Ref ScheduleLambdaAccount
        - Value
      trace: !FindInMap
        - TrueFalse
        - !Ref Trace
        - Value
      log_retention_days: !Ref LogRetentionDays
      started_tags: !Ref StartedTags
      stopped_tags: !Ref StoppedTags
      stack_version: v1.3.0
    DependsOn:
      - SchedulerLogGroup
Outputs:
  AccountId:
    Value: !Ref "AWS::AccountId"
    Description: >-
      Account to give access to when creating cross-account access role fro
      cross account scenario
  ConfigurationTable:
    Value: !Ref ConfigTable
    Description: Name of the DynomoDB configuration table
  IssueSnsTopicArn:
    Value: !Ref InstanceSchedulerSnsTopic
    Description: Topic to subscribe to for notifications of errors and warnings
  ServiceInstanceScheduleServiceToken:
    Value: !GetAtt
      - Main
      - Arn
    Description: >-
      Arn to use as ServiceToken property for custom resource type
      Custom::ServiceInstanceSchedule
