AWSTemplateFormatVersion: 2010-09-09
Description: "SageMaker Notebook"
Parameters:
  TagName:
    Type: String

Resources:
  MlMaxNotebookInstance:
    Type: "AWS::SageMaker::NotebookInstance"
    Properties:
      InstanceType: "ml.m5.4xlarge"
      RoleArn: !GetAtt SagemakerRole.Arn
      LifecycleConfigName: !GetAtt BasicNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
      VolumeSizeInGB: 5
      DefaultCodeRepository: !GetAtt MyCodeCommitRepo.CloneUrlHttp
      Tags:
        - Key: Name
          Value: !Ref TagName

  BasicNotebookInstanceLifecycleConfig:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      OnStart:
        - Content:
            Fn::Base64: !Sub |
              #!/bin/bash

              set -e

              # Part 1: OVERVIEW
              # This script stops a SageMaker notebook once it's idle for more than 1 hour (default time)
              # You can change the idle time for stop using the environment variable below.
              # If you want the notebook the stop only if no browsers are open, remove the --ignore-connections flag
              #
              # Note that this script will fail if either condition is not met
              #   1. Ensure the Notebook Instance has internet connectivity to fetch the example config
              #   2. Ensure the Notebook Instance execution role permissions to SageMaker:StopNotebookInstance to stop the notebook 
              #       and SageMaker:DescribeNotebookInstance to describe the notebook.
              #

              # PARAMETERS
              IDLE_TIME=3600

              echo "Fetching the autostop script"
              wget https://raw.githubusercontent.com/aws-samples/amazon-sagemaker-notebook-instance-lifecycle-config-samples/master/scripts/auto-stop-idle/autostop.py

              echo "Starting the SageMaker autostop script in cron"

              (crontab -l 2>/dev/null; echo "5 * * * * /usr/bin/python $PWD/autostop.py --time $IDLE_TIME --ignore-connections") | crontab -

              echo "List active cron job"
              crontab -l

              # Part 2: Setup git configuration
              YOUR_USER_NAME="your_user_name"
              YOUR_EMAIL_ADDRESS="your_email_address"

              sudo -u ec2-user -i <<EOF
              git config --global user.name "$YOUR_USER_NAME"
              git config --global user.email "$YOUR_EMAIL_ADDRESS"
              EOF

              # Part 3: OVERVIEW
              # This script installs a custom, persistent installation of conda on the Notebook Instance's EBS volume, and ensures that these custom environments
              # are available as kernels in Jupyter.
              #
              # The on-start script uses the custom conda environment created in the on-create script and uses the ipykernel package to add that as a kernel in Jupyter.
              #
              # For another example, see https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-add-external.html#nbi-isolated-environment

              WORKING_DIR=/home/ec2-user/SageMaker/custom-miniconda/
              KERNEL_NAME="custom_python"

              sudo -u ec2-user -i <<EOF
              unset SUDO_UID

              source "$WORKING_DIR/miniconda/bin/activate"

              source activate "$KERNEL_NAME"
              python -m ipykernel install --user --name "$KERNEL_NAME" --display-name "Custom ($KERNEL_NAME)"

              # Optionally, uncomment these lines to disable SageMaker-provided Conda functionality.
              # echo "c.EnvironmentKernelSpecManager.use_conda_directly = False" >> /home/ec2-user/.jupyter/jupyter_notebook_config.py
              # rm /home/ec2-user/.condarc
              EOF

              echo "Restarting the Jupyter server.."
              restart jupyter-server

      OnCreate:
        - Content:
            Fn::Base64: !Sub |
              #!/bin/bash

              set -e

              # OVERVIEW
              # This script installs a custom, persistent installation of conda on the Notebook Instance's EBS volume, and ensures that these custom environments
              # are available as kernels in Jupyter.
              # 
              # The on-create script downloads and installs a custom conda installation to the EBS volume via Miniconda. Any relevant packages can be installed here 
              #   1. ipykernel is installed to   
              #   2. Ensure the Notebook Instance has internet connectivity to download the Miniconda installer
              #
              # For another example, see https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-add-external.html#nbi-isolated-environment

              WORKING_DIR="/home/ec2-user/SageMaker/custom-miniconda"
              KERNEL_NAME="custom_python"
              PYTHON="3.6"

              sudo -u ec2-user -i <<EOF
              unset SUDO_UID

              # Install a separate conda installation via Miniconda
              echo "$WORKING_DIR"
              mkdir -p "$WORKING_DIR"
              wget https://repo.anaconda.com/miniconda/Miniconda3-4.6.14-Linux-x86_64.sh -O "$WORKING_DIR/miniconda.sh"
              bash "$WORKING_DIR/miniconda.sh" -b -u -p "$WORKING_DIR/miniconda" 
              rm -rf "$WORKING_DIR/miniconda.sh"


              # Create a custom conda environment
              source "$WORKING_DIR/miniconda/bin/activate"

              conda create --yes --name "$KERNEL_NAME" python="$PYTHON"
              conda activate "$KERNEL_NAME"

              pip install --quiet ipykernel

              # Customize these lines as necessary to install the required packages
              conda install --yes numpy
              pip install --quiet boto3

              EOF

  SagemakerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "sagemaker.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        # Get policy from other stack
        - !ImportValue S3PolicyExport
        - arn:aws:iam::aws:policy/AWSCodeCommitFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AWSStepFunctionsFullAccess
        - arn:aws:iam::aws:policy/AmazonSageMakerFullAccess
      Tags:
        - Key: Name
          Value: !Ref TagName

  MyCodeCommitRepo:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryDescription: A custom repository
      RepositoryName: cfn-test-repo

Outputs:
  BasicNotebookInstanceId:
    Value: !Ref MlMaxNotebookInstance
  BasicNotebookInstanceLifecycleConfigId:
    Value: !Ref BasicNotebookInstanceLifecycleConfig
