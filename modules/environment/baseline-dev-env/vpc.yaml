AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  EnvironmentName:
    Type: String
    Default: baseline-dev-env

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.192.0.0/16

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.21.0/24

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.22.0/24

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.192.23.0/24

  EnableInternet:
    Type: String
    Default: true

Conditions:
  CreateInternet: !Equals
    - !Ref EnableInternet
    - true
  NoInternet: !Equals
    - !Ref EnableInternet
    - false

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ2)

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private RT 1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private RT 2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  ############################
  # Internet access - Start
  # NOTE: use only 1 NAT Gateway to reduce cost
  ############################

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateInternet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateInternet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ2)

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateInternet
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Condition: CreateInternet
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId:
        Ref: InternetGateway

  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Condition: CreateInternet
    Properties:
      Domain: vpc

  ElasticIP2:
    Type: "AWS::EC2::EIP"
    Condition: CreateInternet
    Properties:
      Domain: vpc

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Condition: CreateInternet
    Properties:
      AllocationId: !GetAtt ElasticIP1.AllocationId
      SubnetId:
        Ref: PublicSubnet1

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Condition: CreateInternet
    Properties:
      AllocationId: !GetAtt ElasticIP2.AllocationId
      SubnetId:
        Ref: PublicSubnet2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateInternet
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  PublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateInternet
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: InternetGateway

  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateInternet
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable

  PrivateRouteToInternet1:
    Type: AWS::EC2::Route
    Condition: CreateInternet
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable1
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: NATGateway1

  PrivateRouteToInternet2:
    Type: AWS::EC2::Route
    Condition: CreateInternet
    Properties:
      RouteTableId:
        Ref: PrivateRouteTable2
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: NATGateway2

  ############################
  # Internet access - End
  ############################

  VPCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group to allow use of VPC Endpoints.
      # GroupName: VPC-Endpoint
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}

  VPCSecurityGroupIngress:
     Type: 'AWS::EC2::SecurityGroupIngress'
     Properties:
        GroupId: !Ref VPCSecurityGroup
        IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        SourceSecurityGroupId: !GetAtt VPCSecurityGroup.GroupId

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet1
    Export:
      Name: ExpPrivateSubnet1

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone
    Value: !Ref PrivateSubnet2
    Export:
      Name: ExpPrivateSubnet2

  VPCSecurityGroup:
    Description: Security group with no ingress rule
    Value: !Ref VPCSecurityGroup
    Export:
      Name: ExpVPCSecurityGroup

  VPCEndpointSecurityGroupId:
    Description: Security group with no ingress rule
    Value: !GetAtt VPCSecurityGroup.GroupId
    Export:
      Name: ExpVPCSecurityGroupId
